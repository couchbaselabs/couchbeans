/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cbb.servers;

import cbb.BeanException;
import cbb.BeanScope;
import cbb.Couchbeans;
import cbb.annotations.Scope;
import cbb.requests.EchoRequest;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

@Scope(BeanScope.EXTERNAL)
public class EchoServer {
    private boolean running;
    private short port = 9000;

    private static transient Thread serverThread;

    private class ServerThread extends Thread {
        @Override
        public void run() {
            try (ServerSocket serverSocket = new ServerSocket(port)) {
                while (!(this.isInterrupted() || serverSocket.isClosed())) {
                    try (Socket socket = serverSocket.accept()) {
                        InputStream in = socket.getInputStream();
                        InputStreamReader inr = new InputStreamReader(in);
                        BufferedReader br = new BufferedReader(inr);
                        String message = br.readLine();
                        EchoRequest request = new EchoRequest(message, socket.getRemoteSocketAddress().toString());
                        Couchbeans.store(request);
                        Couchbeans.link(EchoServer.this, request);
                        PrintStream ps = new PrintStream(socket.getOutputStream());
                        ps.println(message);
                    }
                }
            } catch (Exception e) {
                BeanException.report(EchoServer.this, e);
            } finally {
                running = false;
                Couchbeans.store(EchoServer.this);
            }
        }
    }

    public void setRunning(boolean running) {
        if (this.running != running) {
            if (running) {
                if (serverThread == null || !serverThread.isAlive()) {
                    serverThread = new ServerThread();
                    serverThread.start();
                }
            } else if (serverThread != null && serverThread.isAlive()){
                serverThread.interrupt();
            }
            this.running = running;
        }
    }
}
